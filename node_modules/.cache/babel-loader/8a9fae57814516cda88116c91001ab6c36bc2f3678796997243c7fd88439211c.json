{"ast":null,"code":"import _objectSpread from \"/home/sumran/lalal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/sumran/lalal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n      onUpdate,\n      onComplete\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded);\n  let {\n    keyframes,\n    duration = 0.3,\n    elapsed = 0,\n    ease\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    const sampleAnimation = animate(options);\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    let t = 0;\n    while (!state.done) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = () => {\n    value.set(keyframes[keyframes.length - 1]);\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return () => {\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    const {\n      currentTime\n    } = animation;\n    if (currentTime) {\n      const sampleAnimation = animate(options);\n      value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n    }\n    sync.update(() => animation.cancel());\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","sampleDelta","createAcceleratedAnimation","value","valueName","_ref","onUpdate","onComplete","options","_objectWithoutProperties","_excluded","keyframes","duration","elapsed","ease","type","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","_objectSpread","delay","onfinish","set","length","currentTime","setWithVelocity","update","cancel"],"sources":["/home/sumran/lalal/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    let { keyframes, duration = 0.3, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        const sampleAnimation = animate(options);\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        let t = 0;\n        while (!state.done) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return () => {\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        const { currentTime } = animation;\n        if (currentTime) {\n            const sampleAnimation = animate(options);\n            value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n        }\n        sync.update(() => animation.cancel());\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":";;;AAAA,SAASA,IAAI,QAAQ,2BAA2B;AAChD,SAASC,OAAO,QAAQ,+BAA+B;AACvD,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,sBAAsB,QAAQ,cAAc;;AAErD;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;AACxB,SAASC,0BAA0BA,CAACC,KAAK,EAAEC,SAAS,EAAAC,IAAA,EAAwC;EAAA,IAAtC;MAAEC,QAAQ;MAAEC;IAAuB,CAAC,GAAAF,IAAA;IAATG,OAAO,GAAAC,wBAAA,CAAAJ,IAAA,EAAAK,SAAA;EACpF,IAAI;IAAEC,SAAS;IAAEC,QAAQ,GAAG,GAAG;IAAEC,OAAO,GAAG,CAAC;IAAEC;EAAK,CAAC,GAAGN,OAAO;EAC9D;AACJ;AACA;EACI,IAAIA,OAAO,CAACO,IAAI,KAAK,QAAQ,IAAI,CAACf,sBAAsB,CAACQ,OAAO,CAACM,IAAI,CAAC,EAAE;IACpE,MAAME,eAAe,GAAGlB,OAAO,CAACU,OAAO,CAAC;IACxC,IAAIS,KAAK,GAAG;MAAEC,IAAI,EAAE,KAAK;MAAEf,KAAK,EAAEQ,SAAS,CAAC,CAAC;IAAE,CAAC;IAChD,MAAMQ,qBAAqB,GAAG,EAAE;IAChC,IAAIC,CAAC,GAAG,CAAC;IACT,OAAO,CAACH,KAAK,CAACC,IAAI,EAAE;MAChBD,KAAK,GAAGD,eAAe,CAACK,MAAM,CAACD,CAAC,CAAC;MACjCD,qBAAqB,CAACG,IAAI,CAACL,KAAK,CAACd,KAAK,CAAC;MACvCiB,CAAC,IAAInB,WAAW;IACpB;IACAU,SAAS,GAAGQ,qBAAqB;IACjCP,QAAQ,GAAGQ,CAAC,GAAGnB,WAAW;IAC1Ba,IAAI,GAAG,QAAQ;EACnB;EACA,MAAMS,SAAS,GAAGxB,YAAY,CAACI,KAAK,CAACqB,KAAK,CAACC,OAAO,EAAErB,SAAS,EAAEO,SAAS,EAAAe,aAAA,CAAAA,aAAA,KACjElB,OAAO;IACVmB,KAAK,EAAE,CAACd,OAAO;IACfD,QAAQ;IACR;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQE,IAAI,EAAEA;EAAI,EACb,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,SAAS,CAACK,QAAQ,GAAG,MAAM;IACvBzB,KAAK,CAAC0B,GAAG,CAAClB,SAAS,CAACA,SAAS,CAACmB,MAAM,GAAG,CAAC,CAAC,CAAC;IAC1CvB,UAAU,IAAIA,UAAU,CAAC,CAAC;EAC9B,CAAC;EACD;AACJ;AACA;EACI,OAAO,MAAM;IACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM;MAAEwB;IAAY,CAAC,GAAGR,SAAS;IACjC,IAAIQ,WAAW,EAAE;MACb,MAAMf,eAAe,GAAGlB,OAAO,CAACU,OAAO,CAAC;MACxCL,KAAK,CAAC6B,eAAe,CAAChB,eAAe,CAACK,MAAM,CAACU,WAAW,GAAG9B,WAAW,CAAC,CAACE,KAAK,EAAEa,eAAe,CAACK,MAAM,CAACU,WAAW,CAAC,CAAC5B,KAAK,EAAEF,WAAW,CAAC;IAC1I;IACAJ,IAAI,CAACoC,MAAM,CAAC,MAAMV,SAAS,CAACW,MAAM,CAAC,CAAC,CAAC;EACzC,CAAC;AACL;AAEA,SAAShC,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}